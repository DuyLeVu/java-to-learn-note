Chapter 8. Generic Programming
	Các lớp và phương thức chung có tham số kiểu -> Generic classes, generic methods và tham số kiểu
	Trước khi có Generic Class, sử dụng Object để viết mã hoạt động chung cho nhiều loại khác nhau -> cồng kềnh, không an toàn
	Ra đời từ Java 5 và tạo thành sự thay đổi đáng kể nhất trong nnlt java kể từ lần phát hành đầu tiên
1. Why Generic Programming
	Generic Programming có nghĩa là viết mã có thể được sử dụng lại cho các đối tượng thuộc nhiều loại khác nhau
	1. The advantage of type parameters - Lợi thế của tham số kiểu
		Trước khi các Generic Class được thêm vào Java, lập trình chung đã đạt được với kế thừa. Lớp ArrayList chỉ đơn giản là duy trì một mảng tham chiếu Object (Các lớp kế thừa từ Object thay thế cho kiểu T)
		-> Cách tiếp cận này có hai vấn đề:
			- Cần Cast bất cứ khi nào truy xuất giá trị
				- ArrayList files = new ArrayList(); . . .
					String fileName = (String) files.get(0);
			- không có kiểm tra lỗi. Bạn có thể thêm giá trị của bất kỳ lớp nào
				- files.add(new File(". . .")); -> Biên dịch và chạy không có lỗi, việc truyền kết quả của get thành một String sẽ gây ra lỗi.
		-> Generics cung cấp 1 giải pháp tốt hơn: tham số kiểu. Ex: ArrayList hiện có một tham số kiểu cho biết kiểu phần tử: var files = new ArrayList<String>();
	2. Who Wants to Be a Generic Programmer?
2. Defining a Simple Generic Class
	NOTE: Thông thường sử dụng chữ hoa cho các biến kiểu và giữ chúng ngắn. Thư viện Java sử dụng biến E cho kiểu phần tử của một bộ sưu tập, K và V cho các kiểu khóa và giá trị của bảng, và T (và các chữ cái lân cận U và S, nếu cần) cho "bất kỳ loại nào".
	// impl code
3. Generic Methods
	- Bạn có thể định nghĩa các generic methods cả bên trong các ordinary classes and inside generic classes
	Khi bạn gọi một phương thức chung, bạn có thể đặt các kiểu thực tế, được đặt trong dấu ngoặc góc, trước tên phương thức:
		String middle = ArrayAlg.<String>getMiddle("John", "Q.", "Public");
8.5 Generic Code and the Virtual Machine
	Máy ảo không có các đối tượng thuộc kiểu chung, Trong phần này, bạn sẽ thấy cách trình biên dịch "xóa" các tham số kiểu và ý nghĩa của quá trình đó đối với các lập trình viên Java
	8.5.1 Type Erasure
	8.5.2. Translating Generic Expressions
		- Khi gọi một Generic method. Compiler sẽ chèn các kiểu raw type sau khi T bị "xóa đi"
		- Vd: Hãy xem các câu lệnh sau: 
			Pair<Employee> buddies = . . .;
			Employee buddy = buddies.getFirst();
			trình biên dịch dịch lệnh gọi phương thức thành hai lệnh máy ảo:
			1. Một lệnh gọi đến phương thức thô Pair.getFirst
			2. Ép kiểu trả về object đến kiểu Employee
	8.5.3 Translating Generic Methods
		Xóa kiểu (type erasure) cũng xảy ra đối với các phương thức: 
			public static <T extends Comparable> T min(T[] a) -> public static Comparable min(Comparable[] a)
	Tóm lại, bạn cần nhớ những sự thật này về dịch Java generic:
		1. Không có generic trong máy ảo, chỉ có các lớp và phương thức thông thường.
		2. Tất cả các tham số kiểu được thay thế bằng giới hạn của chúng.
		3. Các Bridge methods sự dụng để bảo đảm tính đa hình khi xóa kiểu
		4. Cast để duy trì type safety
	4. Calling Legacy Code
8.6 Restrictions and Limitations (Một số hạn chế khi làm việc với Generics)
	8.6.1 Type Parameters Cannot Be Instantiated with Primitive Types
	- không thể thay thế một kiểu nguyên thủy cho một tham số kiểu, do đó không có Pair<double> chỉ có Pair<Double>
	8.6.2 Runtime Type Inquiry Only Works with Raw Types
	-
	8.6.3 You Cannot Create Arrays of Parameterized Types
	-Bạn không thể khởi tạo các mảng của các kiểu tham số hóa. VD: var table = new Pair<String>[10]; // ERROR
	8.6.4 Varargs Warnings
	8.6.5 You Cannot Instantiate Type Variables
	7. Type Variables Are Not Valid in Static Contexts of Generic Classes
	8.  You Cannot Throw or Catch Instances of a Generic Class
		- Không thể throw hoặc catch các đối tượng của 1 lớp Generic
		- 
8.8. Wildcard Types - kiểu đại diện bằng ký tự đại diện
	- 
	- Wildcard là ký hiệu ? dùng trong generic để nói rằng kiểu dữ liệu có thể là bất kỳ kiểu nào, và chúng ta có thể giới hạn nó bằng từ khóa extends (kế thừa) hoặc super (cha).
	-  ? extends T (Wildcard với ràng buộc trên - bounded wildcard) - dùng để chỉ một kiểu chưa xác định nhưng phải là con của T, ví dụ như Pair<? extends Employee>.
	8.8.1. The Wildcard Concept 
		- Đây là một cơ chế mà Java cung cấp để làm cho hệ thống kiểu dữ liệu generic trở nên linh hoạt hơn khi làm việc với các lớp kế thừa.
		- Tại sao không set được giá trị? 
			- Vì wildcardPair có thể là Pair<Manager>, mà Employee không phải là Manager → không an toàn để set. 
				Compiler chỉ biết rằng kiểu là "một cái gì đó mở rộng từ Employee", nhưng không biết rõ là loại nào, nên sẽ không cho phép bạn gán bất kỳ đối tượng nào, ngoại trừ null.
		- Nhưng vẫn có thể get ra:
	8.8.4 Wildcard Capture (11/5):
		- Một wilcard không phải là biến kiểu, vì vậy chúng ta không thể viết mã sử dụng ? như một kiểu



Hãy đưa ra 1 vài bài tập để thực hành phần generic này, cụ thể hơn là đưa ra 1 số bài tập để viết các hàm có liên quan đến 1 chương trình xây dựng web socket được viết bằng java core


15/5:
9. Collections
	1. The Java Collections Framework
		1. Separating Collection Interfaces and Implementation (tách rời Interfaces và triển khai impl)
			- Java Collection tách biệt các giao diện và triển khai. Hãy cùng nhìn vào sự phân tách đó với một cấu trúc dữ liệu quen thuộc, hàng đợi - Queue.
				- A queue interface chỉ ra rằng bạn có thể thêm 1 phần tử vào đuôi, lấy ra 1 phần tử ở đầu, có bao nhiêu phần tử trong Queue,...
				- Ví dụ: public interface Queue<E> // a simplified form of the interface in the standard library
					{
 					  void add(E element);
 					  E remove();
 					  int size();
					}
				- Interface không cho biết về cách triển khai cụ thể (Impl). Trong hai cách triển khai phổ biến của Queue là sử dụng Circular Array và LinkedList
					Khi bạn sử dụng một hàng đợi trong chương trình của mình, bạn không cần phải biết triển khai nào thực sự được sử dụng khi Collection đã được xây dựng. 
					Do đó, thật hợp lý khi chỉ sử dụng lớp cụ thể khi bạn xây dựng đối tượng tập hợp. Hãy sử dụng kiểu giao diện để giữ tham chiếu đến tập hợp.

						Queue<Customer> expressLane = new CircularArrayQueue<>(100);
						expressLane.add(new Customer("Harry"));
				- Với cách tiếp cận này, nếu bạn thay đổi suy nghĩ, bạn có thể dễ dàng sử dụng một triển khai khác. Bạn chỉ cần thay đổi chương trình của mình ở một nơi - trong lời gọi hàm khởi tạo. Nếu bạn quyết định rằng một LinkedListQueue là lựa chọn tốt hơn sau tất cả, mã của bạn trở thành


				Tại sao bạn lại chọn một triển khai này hơn một triển khai khác? 
					Interface không nói gì về hiệu quả của một triển khai. Circular array là hơi hiệu quả hơn Linked List, vì vậy nó thường được ưa chuộng hơn. 
					Tuy nhiên, như thường lệ, có một cái giá phải trả. Mảng vòng là một tập hợp có giới hạn - nó có một dung lượng hữu hạn (capacity). Nếu bạn không có giới hạn một cách rõ ràng về số lượng đối tượng mà chương trình của bạn sẽ thu thập, có thể bạn sẽ tốt hơn với một triển khai danh sách liên kết. 
				Khi bạn nghiên cứu tài liệu API, bạn sẽ tìm thấy một bộ lớp khác có tên bắt đầu bằng Abstract, chẳng hạn như AbstractQueue. Những lớp này dành cho những người triển khai thư viện. 
					Trong trường hợp (có thể hiếm xảy ra) mà bạn muốn triển khai lớp hàng đợi riêng của mình, bạn sẽ thấy dễ dàng hơn khi mở rộng AbstractQueue hơn là triển khai tất cả các phương thức của giao diện Queue.
		2. The Collection interface
			Collection Interface có 2 phương thức cơ bản:
				public interface Collection<E>
					{
   						boolean add(E element);
   						Iterator<E> iterator();
	   						. . .
					}
				Phương pháp iterator trả về một đối tượng thực hiện giao diện Iterator. Bạn có thể sử dụng đối tượng iterator để truy cập các phần tử trong Collection từng cái một
		3. Iterators
			Iterator interface có 4 method:
			The Iterator interface has four methods:
				public interface Iterator<E>
					{
   						E next();
   						boolean hasNext();
   						void remove();
   						default void forEachRemaining(Consumer<? super E> action);
					}
			Bằng cách lập lại việc gọi phương thức next, bạn có thể duyệt qua các phần tử trong tập hợp một cách từng cái một. Tuy nhiên, nếu bạn đến cuối tập hợp, phương thức next sẽ ném ra một ngoại lệ NoSuchElementException. 
			Do đó, bạn cần gọi phương thức hasNext trước khi gọi next. Phương thức đó trả về true nếu đối tượng lập iterator còn có nhiều phần tử để duyệt. 
			Nếu bạn muốn kiểm tra tất cả các phần tử trong một tập hợp, hãy yêu cầu một iterator và sau đó tiếp tục gọi phương thức next trong khi hasNext trả về true. Ví dụ:
				Collection<String> c = . . .;
				Iterator<String> iter = c.iterator();
				while (iter.hasNext())
					{
 						 String element = iter.next();
						do something with element
					}
			You can write such a loop more concisely as the “for each” loop:
				for (String element : c)
					{
						do something with element
					}
		4.  Generic Utility Methods

			Trên thực tế, giao diện Collection tuyên bố khá nhiều phương thức hữu ích mà tất cả các lớp triển khai phải cung cấp. Trong số đó có:
				int size()
					boolean isEmpty()
					boolean contains(Object obj)
					boolean containsAll(Collection<?> c)
					boolean equals(Object other)
					boolean addAll(Collection<? extends E> from)
					boolean remove(Object obj)
					boolean removeAll(Collection<?> c)
					void clear()
					boolean retainAll(Collection<?> c)
					Object[] toArray()
	2. Interfaces in the Collections Framework
		Có hai giao diện cơ bản cho các Collections Framework: Collection và Map
			bạn chèn các phần tử vào một Collection bằng một phương thức - boolean add(E element). 
			Tuy nhiên, Map lưu trữ các cặp khóa/giá trị, và bạn sử dụng phương thức put để chèn - V put(K key, V value).
			Để đọc các phần tử từ một Collection, hãy truy cập chúng bằng một iterator. Tuy nhiên, bạn có thể đọc giá trị từ một bản đồ bằng phương thức get: V get(K key)
			
			List là một  tập hợp có thứ tự. Các phần tử được thêm vào một vị trí cụ thể trong container. 
				Một phần tử có thể được truy cập bằng hai cách: bằng một bộ lặp (iterator) hoặc bằng một chỉ số số nguyên. 
				Cách thứ hai được gọi là truy cập ngẫu nhiên vì các phần tử có thể được truy cập theo bất kỳ thứ tự nào. 
				Ngược lại, khi sử dụng một iterator, người ta phải truy cập chúng tuần tự.
	3. Concrete Collections
		1. LinkedList và Iterator.
		a.Bản chất LinkedList
			
				LinkedList là một cấu trúc dữ liệu danh sách liên kết (linked list) – một dạng Collection có thứ tự rõ ràng, trong đó vị trí của các phần tử là quan trọng. Phương thức add() của LinkedList mặc định sẽ thêm phần tử vào cuối danh sách.
				Tuy nhiên, trong nhiều trường hợp, bạn cần chèn phần tử ở giữa danh sách. Việc thêm phần tử dựa trên vị trí cụ thể không do phương thức add() của Collection xử lý, mà được thực hiện thông qua iterator, cụ thể là ListIterator.
			ListIterator – mở rộng Iterator
				b. ListIterator là một subinterface của Iterator có khả năng:

					Thêm phần tử tại vị trí con trỏ.

					Duyệt ngược danh sách.	
					interface ListIterator<E> extends Iterator<E> {
    						void add(E element);       // thêm phần tử tại vị trí iterator
    						E previous();              // duyệt ngược
    						boolean hasPrevious();     // kiểm tra còn phần tử phía trước không
   						 ...
					}
					Khác với Collection.add, phương thức add() của ListIterator không trả về boolean vì mặc định luôn thực hiện thành công.
				c. Duyệt và thêm phần tử vào giữa danh sách

					Bạn có thể sử dụng phương thức listIterator() của LinkedList để lấy iterator hỗ trợ thêm/xóa/phân tích vị trí phần tử.
					Vd: var staff = new LinkedList<String>();
						staff.add("Amy");
						staff.add("Bob");
						staff.add("Carl");

						ListIterator<String> iter = staff.listIterator();
						iter.next();            // bỏ qua phần tử đầu tiên (Amy)
						iter.add("Juliet");    // chèn "Juliet" trước phần tử thứ hai (Bob)
					Nếu gọi add() nhiều lần liên tiếp, các phần tử được thêm trước vị trí hiện tại của iterator, theo đúng thứ tự gọi.
				d. Các vị trí chèn trong LinkedList
					Với danh sách gồm n phần tử, sẽ tồn tại n + 1 vị trí có thể chèn phần tử mới — tương ứng với các vị trí giữa các phần tử hoặc ở đầu/cuối danh sách:
					Ví dụ: Danh sách gồm 3 phần tử A, B, C Có 4 vị trí chèn hợp lệ:1, 2, 3, 4
						Vị trí 0: thêm vào đầu danh sách.
						Vị trí 3: thêm vào cuối danh sách.
						Các vị trí giữa: chèn vào giữa 2 phần tử.
		=> Trong các ứng dụng cần thao tác danh sách động như hàng đợi, undo/redo, danh sách phát (playlist),... LinkedList và ListIterator là một lựa chọn mạnh mẽ.
			
				f. vấn đề khi nhiều iterator cùng lúc truy cập và sửa đổi một collection, điều này có thể gây ra lỗi. Java đã thiết kế các iterator (đặc biệt là iterator của LinkedList) để phát hiện những thay đổi không hợp lệ này, và nếu phát hiện, chúng sẽ ném ra ngoại lệ ConcurrentModificationException
					Khi bạn sử dụng nhiều iterator để duyệt qua cùng một danh sách, nếu một trong số chúng thay đổi danh sách (ví dụ như xoá hoặc thêm phần tử), thì các iterator còn lại sẽ "bị lệch" vì vị trí mà chúng lưu giữ không còn hợp lệ nữa.
					Cơ chế kiểm tra rất đơn giản:

						Collection giữ một "biến đếm" số lần bị thay đổi.

						Mỗi iterator cũng giữ bản sao biến đếm này tại thời điểm nó được tạo.

						Trước mỗi thao tác (next(), remove()...), iterator sẽ kiểm tra xem biến đếm của nó có còn khớp với Collection không. Nếu không khớp, tức là danh sách đã bị thay đổi bên ngoài, thì ném lỗi.

						Cách tránh lỗi này:

							Nếu bạn chỉ đọc: dùng bao nhiêu iterator cũng được.

							Nếu bạn cần xoá hoặc thêm: chỉ dùng một iterator duy nhất để vừa đọc vừa ghi.
						Tong hop:
							Không được thay đổi danh sách bằng nhiều iterator cùng lúc.

							Nếu một iterator sửa đổi danh sách, những iterator khác sẽ bị lỗi nếu tiếp tục sử dụng.

							Java phát hiện việc sửa đổi đồng thời bằng cách so sánh số lần sửa đổi giữa Collection và từng Iterator.

							Chỉ nên dùng một iterator nếu cần sửa danh sách, hoặc nhiều iterator nếu chỉ đọc.
					có một ngoại lệ thú vị trong cơ chế phát hiện thay đổi đồng thời: phương thức set() không được xem là thay đổi cấu trúc của danh sách. Điều này có nghĩa là bạn có thể dùng nhiều iterator cùng lúc để thay đổi nội dung phần tử hiện tại của danh sách mà không gây lỗi.
						Phương thức set() được phép gọi từ nhiều iterator mà không gây lỗi.

						Miễn là bạn không thêm hoặc xoá phần tử, bạn có thể sử dụng nhiều iterator để cập nhật nội dung phần tử.

						Đây là hành vi được thiết kế cố ý để hỗ trợ các thuật toán cập nhật dữ liệu hiệu quả.	
			g. Danh sách liên kết không hỗ trợ truy cập ngẫu nhiên nhanh chóng. 
				Nếu bạn muốn xem phần tử thứ n của danh sách liên kết, bạn phải bắt đầu từ đầu và bỏ qua n - 1 phần tử đầu tiên. Không có lối tắt nào cả. 
				Vì lý do đó, các lập trình viên thường không sử dụng danh sách liên kết trong những trường hợp mà các phần tử cần được truy cập bởi chỉ số nguyên.
			Bạn không nên bao giờ sử dụng phương pháp truy cập ngẫu nhiên ảo này (get()) để duyệt qua danh sách liên kết. 
				for (int i = 0; i < list.size(); i++) thực hiện điều gì đó với list.get(i); là cực kỳ không hiệu quả. 
				Mỗi lần bạn tìm kiếm một phần tử khác , quá trình tìm kiếm (get()) lại bắt đầu từ đầu danh sách.
				- Phương thức get có một tối ưu hóa nhẹ: Nếu chỉ số ít nhất bằng kích thước() / 2, việc tìm kiếm phần tử bắt đầu từ cuối danh sách.
			If you want random access into a collection, use an array or ArrayList, not a linked list.
		2. ArrayList
			- Iterface List mô tả một tập hợp có thứ tự mà trong đó vị trí của các phần tử rất quan trọng. Có hai quy trình để truy cập các phần tử: thông qua một bộ lặp và bằng cách truy cập ngẫu nhiên với các phương thức get và set. Get set không phù hợp cho Linked List, nhưng tất nhiên get và set rất hợp lý cho các mảng. 
			- Thư viện collections cung cấp lớp ArrayList quen thuộc cũng thực hiện Interface List. 
			- Một ArrayList bao encapsulates một mảng đối tượng được cấp phát lại một cách động.
			- Lưu ý: Nếu bạn là một lập trình viên Java kỳ cựu, có thể bạn đã sử dụng lớp Vector mỗi khi cần một mảng động. 
					Tại sao nên sử dụng ArrayList thay vì Vector? Có một lý do đơn giản: Tất cả các phương thức của lớp Vector đều được đồng bộ hóa. Việc truy cập một đối tượng Vector từ hai luồng là an toàn. Nhưng nếu bạn chỉ truy cập một vector từ một luồng duy nhất – trường hợp phổ biến hơn rất nhiều – mã của bạn lãng phí khá nhiều thời gian cho việc đồng bộ hóa. Ngược lại, các phương thức của ArrayList không được đồng bộ hóa. 
				- Tôi khuyên bạn nên sử dụng một ArrayList thay vì một Vector bất cứ khi nào bạn không cần đồng bộ hóa.
		3. Hash Sets
			- 
		4. TreeSet
			- Lớp TreeSet tương tự như HashSet, với một cải tiến bổ sung. Một TreeSet là một tập hợp đã được sắp xếp. 
			Bạn có thể chèn các phần tử vào set theo bất kỳ thứ tự nào. Khi bạn lặp qua set, các giá trị sẽ tự động được trình bày theo thứ tự đã sắp xếp.
		5. Queues and Deques
			Như chúng ta đã thảo luận, hàng đợi cho phép bạn thêm phần tử một cách hiệu quả ở đuôi và loại bỏ phần tử từ đầu. 
			Hàng đợi hai đầu - deque, cho phép bạn thêm hoặc loại bỏ phần tử một cách hiệu quả ở đầu và đuôi. Việc thêm phần tử vào giữa không được hỗ trợ. 
			Java 6 đã giới thiệu một giao diện Deque - Nó được triển khai bởi các lớp ArrayDeque và LinkedList, cả hai đều cung cấp deque có kích thước tự động tăng khi cần.
		6. Priority Queues
		7. Maps
			


